
const int samples = 20;
// array of offset direction for sampling
vec3 gridSamplingDisk[samples] = vec3[]
(
    vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1),
    vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
    vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
    vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
    vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);


// in shadow 1.0   out of shadow 0.0
float ShadowCalculation(vec3 vFragmentPosition, float diff) {
    vec3 lightToFrag = vFragmentPosition - lightPosition;
    float currentDepth = length(lightToFrag);
    // bias
    // 当阴影偏移到一个夸张的值时，就会出现明显的阴影悬浮（peter panning）问题
    // 解决这个问题的一个思路就是 渲染深度贴图的时候开启正面剔除，这样，相关片段的深度贴图值就会更大，即使一个夸张的bias也不会影响到该值
    float bias = max(0.05 * (1.0 - diff), 0.005);
    float shadow = 0.0;
    float viewDistance = length(vFragmentPosition - cameraPosition);
    float diskRadius = (1.0 + viewDistance / farPlane) / 25.0;
    for (int i = 0; i < samples; i++) {
        float closestDepth = texture(depthMap, lightToFrag + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= farPlane;
        if (currentDepth > closestDepth + bias) {
            shadow += 1.0;
        }
    }
    shadow /= float(samples);

    return shadow;
}
